import { NextResponse } from 'next/server'
import { Resend } from 'resend'
import { supabase } from '@/lib/supabase'
import { renderToBuffer } from '@react-pdf/renderer'
import { generateBookingPDF } from '@/lib/pdf-generator'

const resend = new Resend(process.env.RESEND_API_KEY)

export async function POST(request) {
  try {
    const body = await request.json()
    const {
      name,
      dob,
      email,
      phone,
      insurer,
      policy,
      urgency,
      summary,
      consent,
      seat_id
    } = body

    // Validate required fields
    if (!name || !dob || !email || !phone || !summary || !consent || !seat_id) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Get seat data
    const { data: seatData, error: seatError } = await supabase
      .from('seats')
      .select('*')
      .eq('seat_id', seat_id)
      .single()

    if (seatError || !seatData) {
      return NextResponse.json(
        { error: 'Invalid seat ID' },
        { status: 400 }
      )
    }

    // Log the referral
    const { error: referralError } = await supabase
      .from('referrals')
      .insert({
        seat_id,
        patient_name: name,
        dob,
        email,
        phone,
        insurer,
        policy,
        urgency,
        summary,
        consent
      })

    if (referralError) {
      console.error('Error logging referral:', referralError)
    }

    // Generate PDF
    const formData = {
      name,
      dob,
      email,
      phone,
      insurer,
      policy,
      urgency,
      summary,
      seat_id
    }

    const pdfDoc = generateBookingPDF(formData, seatData)
    const pdfBuffer = await renderToBuffer(pdfDoc)

    // Send email
    const emailData = {
      from: 'referrals@regentscare.com',
      to: seatData.practice_email,
      cc: email,
      subject: `New Appointment Request - ${name}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="text-align: center; margin-bottom: 30px;">
            <img src="https://regentscare.com/logo.png" alt="Regents Care" style="height: 50px;">
          </div>
          
          <h2 style="color: #4F46E5; margin-bottom: 20px;">New Appointment Request</h2>
          
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="margin-top: 0; color: #333;">Patient Information</h3>
            <p><strong>Name:</strong> ${name}</p>
            <p><strong>Date of Birth:</strong> ${dob}</p>
            <p><strong>Email:</strong> ${email}</p>
            <p><strong>Phone:</strong> ${phone}</p>
            ${insurer ? `<p><strong>Insurance:</strong> ${insurer} - ${policy || 'N/A'}</p>` : ''}
            <p><strong>Urgency:</strong> ${urgency}</p>
            <p><strong>Summary:</strong> ${summary}</p>
          </div>
          
          <div style="background-color: #e8f4fd; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="margin-top: 0; color: #333;">Practice Information</h3>
            <p><strong>Doctor:</strong> ${seatData.doctor_name}</p>
            <p><strong>Seat ID:</strong> ${seat_id}</p>
          </div>
          
          <p style="color: #666; font-size: 14px;">
            This booking request was generated by Regents Care. 
            Please find the detailed PDF attachment below.
          </p>
          
          <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
            <p style="color: #999; font-size: 12px;">
              Regents Care - Streamlining Healthcare Appointments
            </p>
          </div>
        </div>
      `,
      attachments: [
        {
          filename: `appointment-request-${name.replace(/\s+/g, '-').toLowerCase()}.pdf`,
          content: pdfBuffer
        }
      ]
    }

    const { data: emailResult, error: emailError } = await resend.emails.send(emailData)

    if (emailError) {
      console.error('Email error:', emailError)
      return NextResponse.json(
        { error: 'Failed to send email' },
        { status: 500 }
      )
    }

    return NextResponse.json({
      success: true,
      message: 'Appointment request sent successfully',
      emailId: emailResult?.id
    })

  } catch (error) {
    console.error('API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
